---
const { target = 100, label = "Example text", suffix = "" } = Astro.props;
---

<animated-counter data-target={target} data-label={label} data-suffix={suffix}>
  <div class="counter-container">
    <div class="counter-number">0</div>
    <div class="counter-label">{label}</div>
  </div>
</animated-counter>

<script>
  class AnimatedCounter extends HTMLElement {
    connectedCallback() {
      const target = parseInt(this.getAttribute('data-target') ?? '0', 10) || 0;
      const suffix = this.getAttribute('data-suffix') || "";
      const numberEl = this.querySelector('.counter-number');
      let hasAnimated = false;
      const duration = 2000; // ms
      const start = 0;
      const easeOutQuad = (t) => t * (2 - t); // Ease out function
      const animate = (startTime) => {
        const now = performance.now();
        const elapsed = now - startTime;
        const progress = Math.min(elapsed / duration, 1);
        const eased = easeOutQuad(progress);
        const value = Math.floor(start + (target - start) * eased);
        if (numberEl) {
          numberEl.textContent = value.toLocaleString() + suffix;
        }
        if (progress < 1) {
          requestAnimationFrame(() => animate(startTime));
        } else {
          if (numberEl) {
            numberEl.textContent = target.toLocaleString() + suffix;
          }
        }
      };
      const startAnimation = () => {
        if (!hasAnimated) {
          hasAnimated = true;
          requestAnimationFrame((startTime) => animate(startTime));
        }
      };
      // Intersection Observer to trigger animation on scroll
      const observer = new window.IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            startAnimation();
            observer.disconnect();
          }
        });
      }, { threshold: 0.5 });
      observer.observe(this);
    }
  }
  customElements.define('animated-counter', AnimatedCounter);
</script>

<style>
  .counter-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    font-family: var(--font-base);
    margin: var(--spacing-md);
  }

  .counter-number {
    min-width: 2.5em;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 4rem;
    font-family: var(--font-heading);
    color: var(--color-accent);
    font-weight: bold;
    text-align: center;
  }

  .counter-label {
    font-size: 1rem;
    color: var(--color-accentSecondary);
    margin-top: var(--spacing-sm);
  }
</style>
